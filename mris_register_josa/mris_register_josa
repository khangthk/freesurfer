import logging
import os

logging.disable(logging.WARNING)
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "3"

import sys
from argparse import ArgumentParser
from pathlib import Path

import surfa as sfa
import numpy as np
import tensorflow as tf
from spheremorph.py.utils import norm_curvature
from spheremorph.tf.utils import pad_2d_image_spherically, unpad_2d_image
from spheremorph.tf.utils.models import spm_geom_model


def main():
    parser = ArgumentParser(prog='JOSA', description='Learning-based surface registration', conflict_handler='resolve')

    # mandatory input arguments
    parser.add_argument('-h', '--hmsp', type=str, choices=['lh', 'rh'], help='which hemisphere, lh or rh')
    parser.add_argument('-a', '--arch', type=str, choices=['spm2000'], default='spm2000', help='network architecture')
    parser.add_argument('-m', '--model', type=Path, default='', help='path to the model weights file')
    parser.add_argument('-s', '--subject_dir', type=Path, default=None,
                        help='path to subject directory (does not use $SUBJECTS_DIR)')
    parser.add_argument('-o', '--output', type=str, default=None,
                        help='custom output file, default is to save to subject/surf/hemi.sphere.reg')

    # optional inputs for overriding, not needed if subject_dir follows freesurfer directory structure
    parser.add_argument('-S', '--sulc', type=Path, default=None,
                        help='path to ?h.sulc file, overrides surf_dir/?h.sulc')
    parser.add_argument('-C', '--curv', type=Path, default=None,
                        help='path to ?h.curv file, overrides surf_dir/?h.curv')
    parser.add_argument('-H', '--inflated_curv', type=Path, default=None,
                        help='path to ?h.inflated.H file, overrides surf_dir/?h.inflated.H')
    parser.add_argument('-t', '--sphere_rot', type=Path, default=None, help='path to ?h.sphere.rot file')

    # other optional arguments
    parser.add_argument('-T', '--threads', type=int, default=1, help='number of threads to use. default is 1.')
    args = parser.parse_args()

    # check for no arguments
    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    hmsp = args.hmsp  # exception handled in parser
    model_file = Path(args.model)
    if not model_file.exists():
        raise ValueError('model file does not exist')

    if args.subject_dir is None:
        if args.output is None:
            raise ValueError('output file must be specified if subject_dir is not provided')
        subject_dir = Path('')
    else:
        subject_dir = Path(args.subject_dir)

    surf_dir = Path(subject_dir / 'surf')
    sulc_file = Path(surf_dir / f'{hmsp}.sulc')
    curv_file = Path(surf_dir / f'{hmsp}.curv')
    inf_h_file = Path(surf_dir / f'{hmsp}.inflated.H')
    sphere_rot_file = Path(surf_dir / f'{hmsp}.sphere.rot')

    # override with sulc, curv, inflated.H files if specified
    if args.sulc:
        sulc_file = Path(args.sulc)
    if args.curv:
        curv_file = Path(args.curv)
    if args.inflated_curv:
        inf_h_file = Path(args.inflated_curv)
    if args.sphere_rot:
        sphere_rot_file = Path(args.sphere_rot)

    for f in [sulc_file, curv_file, inf_h_file, sphere_rot_file]:
        if not f.exists():
            raise FileNotFoundError(f'{f} not found')

    out_file_fixed = args.output
    if out_file_fixed is None:  # surf_dir must exist at this point
        out_file_fixed = Path(surf_dir) / f'{hmsp}.sphere.reg'
    else:
        out_file_fixed = Path(out_file_fixed)

    output_dir = out_file_fixed.parent
    output_dir.mkdir(parents=True, exist_ok=True)
    out_file_prefix = Path(f'{out_file_fixed}.prefixed')
    print(f'prefix file {out_file_prefix}')
    print(f'output file {out_file_fixed}')
    print(f'model file {model_file}')

    # set number of threads
    print('Using %d thread(s)' % args.threads)
    tf.config.threading.set_inter_op_parallelism_threads(args.threads)

    # ==================== processing starts from here ====================
    print('parameterizing cortical features ... ', end='')
    surf_feature_file = [sulc_file, curv_file, inf_h_file]
    geoms = list()
    for file_name in surf_feature_file:
        geoms.append(sfa.load_overlay(str(file_name)))
    geoms_norm = [norm_curvature(x, which_norm='Median') for x in geoms]
    geoms_norm = np.stack(geoms_norm, axis=1)

    sphere_rot = sfa.load_mesh(str(sphere_rot_file))
    pad_size = 16

    mrisp_geom_norm = sfa.sphere.SphericalMapBarycentric(sphere_rot).parameterize(geoms_norm).framed_data
    mrisp_geom_norm = (mrisp_geom_norm - mrisp_geom_norm.mean()) / mrisp_geom_norm.std()
    mrisp_geom_norm_padded = pad_2d_image_spherically(mrisp_geom_norm[np.newaxis, ...], pad_size)
    print('done')

    print('constructing the network ... ', end='')
    if args.arch == 'spm2000':
        model = spm_geom_model(Path(args.model))
    else:
        raise ValueError(f'network architecture {args.arch} not supported')
    print('done')

    print('registering to the atlas ... ', end='')
    mrisp_coord = sfa.sphere.SphericalMapBarycentric(sphere_rot).parameterize(sphere_rot.vertices)
    mrisp_coord_padded = pad_2d_image_spherically(mrisp_coord[np.newaxis, ...], pad_size)
    warped_mrisp_coord = model.warp(mrisp_geom_norm_padded, mrisp_coord_padded, 'to_subject', idx=0)
    warped_mrisp_coord_unpad = unpad_2d_image(warped_mrisp_coord, pad_size)[0, :, :, :]
    print('done')

    print('saving sphere.reg to disk ... ', end='')
    v = sfa.sphere.SphericalMapBarycentric(sphere_rot).sample(warped_mrisp_coord_unpad)
    v = v / np.linalg.norm(v, axis=-1, keepdims=True) * 100.0
    sphere_reg = sphere_rot.copy()
    sphere_reg.vertices = v
    sfa.io.mesh.save_mesh(sphere_reg, str(out_file_prefix))
    print('done')

    print('removing intersecting vertices ... ', end='')
    cmd = f'mris_remove_intersection {out_file_prefix} {out_file_fixed}'
    os.system(cmd)
    os.remove(str(out_file_prefix))
    print('done')


if __name__ == '__main__':
    main()
